- hosts: microk8sservers
  become: true
  become_user: root
  tasks:
    - name: Generate /etc/hosts for microk8s
      lineinfile:
        path: /etc/hosts
        state: present
        create: true
        regexp: '.*{{ item }} #microk8s$'
        line: "{{ hostvars[item]['vars']['advertise_ip'] }} {{ hostvars[item]['ansible_facts']['hostname'] }} #microk8s"
      when: vars['vars']['advertise_ip'] is defined
      loop: "{{ groups['microk8sservers'] | flatten(levels=1) }}"

    - name: Install microk8s
      community.general.snap:
        name:
          - microk8s
        classic: true
        channel: 1.27

    - name: Template microk8s config
      template:
        src: './microk8s/{{ item.file }}.j2'
        dest: '{{ ansible_user_dir }}/{{ item.file }}'
        force: true
        mode: '{{ item.mode }}'
      loop:
        - { file: microk8s-config.yaml, mode: '644' }



- hosts: microk8sprimary
  become: true
  become_user: root
  tasks:
    - name: Restart microk8s with new config
      shell: snap set microk8s config="$(cat {{ ansible_user_dir }}/microk8s-config.yaml)"
    - name: Wait
      shell: sleep 60 && microk8s status --wait-ready
    - name: Refresh certs
      shell: microk8s refresh-certs -e server.crt
      when:
        - lookup('ansible.builtin.fileglob', './tmp/kubeconfig.yaml') == []
    - name: Wait
      shell: sleep 60 && microk8s status --wait-ready

    - name: Get instructions to add node
      shell: "microk8s add-node | grep {{ vars['vars']['advertise_ip'] }} | head -n1"
      register: JOINCMD
    - debug:
        msg: '{{ JOINCMD.stdout }}'
    - shell: exit 1
      when: (JOINCMD.stdout | length) < 1



- hosts: microk8sservers
  become: true
  become_user: root
  tasks:
    - name: Restart microk8s with new config
      shell: snap set microk8s config="$(cat {{ ansible_user_dir }}/microk8s-config.yaml)"
      when:
        - inventory_hostname not in groups['microk8sprimary']
    - name: Wait
      shell: sleep 60 && microk8s status --wait-ready
      when:
        - inventory_hostname not in groups['microk8sprimary']
    - name: Refresh certs
      shell: microk8s refresh-certs -e server.crt
      when:
        - inventory_hostname not in groups['microk8sprimary']
        - lookup('ansible.builtin.fileglob', './tmp/kubeconfig.yaml') == []
    - name: Wait
      shell: sleep 60 && microk8s status --wait-ready
      when:
        - inventory_hostname not in groups['microk8sprimary']



- hosts: microk8sprimary
  become: true
  become_user: root
  tasks:
    - name: Extract kubeconfig
      shell: "microk8s config > /var/tmp/kubeconfig.yaml"
      when:
        - lookup('ansible.builtin.fileglob', './tmp/kubeconfig.yaml') == []
    - name: Fetch kubeconfig
      fetch:
        src: /var/tmp/kubeconfig.yaml
        dest: ./tmp/kubeconfig.yaml
        flat: true
      when:
        - lookup('ansible.builtin.fileglob', './tmp/kubeconfig.yaml') == []

    - name: Enable microk8s addons
      shell: microk8s enable {{ item.name }}
      loop:
        - { name: dns }
        - { name: community }
        - { name: metrics-server } # will be replace when argocd starts
        - { name: cert-manager } # will be replace when argocd starts
        # - { name: traefik } # microk8s installs deplyoment, but we want daemonset, will be replace when argocd starts
        # - { name: istio } # will be replace when argocd starts
        # - { name: knative } # will be replace when argocd starts
        # - { name: openfaas } # will be replace when argocd starts
