- hosts: all
  become: true
  become_user: root
  tasks:
    - name: Copy bin scripts
      copy:
        src: './bin/{{ item }}'
        dest: '/usr/local/bin/{{ item }}'
        force: true
        mode: '755'
      loop:
        - cert_generateselfsigned
        - cert_info
    - name: Copy network scripts
      copy:
        src: './network/{{ item.file }}'
        dest: '{{ item.dest }}/{{ item.file }}'
        force: true
        mode: '{{ item.mode }}'
      loop:
        - { file: get-ip, dest: '/usr/local/bin', mode: '755' }
        - { file: update-issue, dest: '/usr/local/sbin', mode: '755' }



- hosts: sticks
  become: true
  become_user: root
  tasks:
    - name: Copy healthcheck scripts
      copy:
        src: './healthcheck/{{ item.file }}'
        dest: '{{ item.dest }}/{{ item.file }}'
        force: true
        mode: '{{ item.mode }}'
      loop:
        - { file: healthcheck-diff.sh, dest: '/usr/local/sbin', mode: '755' }
    # - name: Template healthcheck scripts
    #   template:
    #     src: './healthcheck/{{ item.file }}.j2'
    #     dest: '{{ item.dest }}/{{ item.file }}'
    #     force: true
    #     mode: '{{ item.mode }}'
    #   loop:
    #     - { file: healthcheck_cron, dest: '/etc/cron.d', mode: '644' } # required no dot in cron.d filenames
    - name: Delete unused scripts
      file:
        path: '{{ item }}'
        force: true
        state: absent
      loop:
        - /etc/cron.d/healthcheck_cron
    - name: Force cron.d to reload
      shell: touch /etc/cron.d

    - name: Create a docker volume
      community.general.lvol:
        vg: ubuntu-vg
        lv: userdata
        size: 12g
    - name: Create a ext4 filesystem
      community.general.filesystem:
        dev: /dev/mapper/ubuntu--vg-userdata
        fstype: ext4
    - name: Mount userdata volume
      ansible.posix.mount:
        src: /dev/mapper/ubuntu--vg-userdata
        path: /userdata
        fstype: ext4
        passno: '2'
        state: mounted



- hosts: mac
  become: true
  become_user: root
  tasks:
    # - name: Link docker.sock in mac
    #   file:
    #     src: '/Users/{{ ansible_user }}/.docker/run/docker.sock'
    #     dest: /var/run/docker.sock
    #     force: true
    #     mode: '755'
    #     state: link
    - name: Delete unused scripts
      file:
        path: '{{ item }}'
        force: true
        state: absent
      loop:
        - /var/run/docker.sock



- hosts: ubuntu
  become: true
  become_user: root
  tasks:
    - name: Remove default ubuntu user
      user:
        user: ubuntu
        state: absent
        remove: true
        force: true
    - name: Allow ansible_user to sudo NOPASSWD
      lineinfile:
        path: /etc/sudoers.d/90-cloud-init-users
        state: present
        create: true
        regexp: '^{{ ansible_user }}'
        line: '{{ ansible_user }} ALL=(ALL) NOPASSWD:ALL'
        validate: /usr/sbin/visudo -cf %s
    - name: Reset lab password
      shell: '(echo lab;echo lab;)| passwd lab'

    - name: Update apt repo and cache
      apt:
        force_apt_get: true
        update_cache: true
        cache_valid_time: 3600

    - name: Copy luks scripts
      copy:
        src: './luks-autounlock/{{ item.file }}'
        dest: '{{ item.dest }}/{{ item.file }}'
        force: true
        mode: '{{ item.mode }}'
      loop:
        - { file: setup-luks-autounlock.sh, dest: '/usr/local/sbin', mode: '755' }

    - name: Setup trigger on networkd-dispatcher
      file:
        src: /usr/local/sbin/update-issue
        dest: '/etc/networkd-dispatcher/{{ item }}.d/update-issue'
        force: true
        mode: '755'
        state: link
      loop:
        - 'carrier'
        - 'no-carrier'
        - 'dormant'
        - 'off'
        - 'routable'
    - name: Check /etc/issue version
      shell: cat /etc/issue | grep -q "{{ ansible_facts['lsb']['description'] }}" && echo '0' || echo '1'
      register: ISSUE
    - name: Refresh base-files if OS version mismatched
      # found that /etc/issue is installed by base-files: dpkg -S /etc/issue
      shell: rm -v /etc/issue ; apt-get install --reinstall -y -o Dpkg::Options::="--force-confmiss" base-files
      register: BASEFILES
      when: (ISSUE.stdout | int) > 0
    - debug:
        var: BASEFILES.stdout_lines
      when: (ISSUE.stdout | int) > 0

    # - name: Install packages
    #   apt:
    #     force_apt_get: true
    #     name: '{{ item }}'
    #   loop:
    #     - docker.io
    #     - docker-compose

    - name: Remove unused packages
      apt:
        force_apt_get: true
        name: '{{ item }}'
        state: absent
        purge: true
      loop:
        - docker
        - wmdocker
        - docker.io
        - docker-compose
    # - name: Delete unused scripts
    #   file:
    #     path: '{{ item }}'
    #     force: true
    #     state: absent
    #   loop:
    #     - /bin/cert_generateselfsigned
    #     - /bin/cert_info
    #     - /bin/get-ip
    #     - /sbin/update-issue
    #     - /sbin/healthcheck-diff.sh

    - name: Upgrade all packages
      # https://www.cyberciti.biz/faq/ansible-apt-update-all-packages-on-ubuntu-debian-linux/
      apt:
        force_apt_get: true
        upgrade: dist
    - name: Cleanup apt
      apt:
        force_apt_get: true
        clean: true

    - name: Check if a reboot is needed
      register: reboot_required_file
      stat:
        path: /var/run/reboot-required
        get_md5: false
    - name: Reboot if kernel updated
      reboot:
        msg: 'Reboot initiated by Ansible for kernel updates'
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime
      when: reboot_required_file.stat.exists



- hosts: ucarpservers
  become: true
  become_user: root
  tasks:
    - name: Install packages
      apt:
        force_apt_get: true
        name: '{{ item }}'
      loop:
        - ucarp
    - name: Create ucarp directory if it does not exist
      file:
        path: /etc/ucarp
        state: directory
        force: true
        mode: '755'
    - name: Copy ucarp scripts
      copy:
        src: './ucarp/{{ item.file }}'
        dest: '{{ item.dest }}/{{ item.file }}'
        force: true
        mode: '{{ item.mode }}'
      loop:
        - { file: ucarp@.service, dest: '/usr/lib/systemd/system', mode: '644' }
        - { file: vip-common.conf, dest: '/etc/ucarp', mode: '644' }
    - name: Template ucarp scripts
      template:
        src: './ucarp/{{ item.file }}.j2'
        dest: '{{ item.dest }}/{{ item.file }}'
        force: true
        mode: '{{ item.mode }}'
      loop:
        - { file: vip-001.conf, dest: '/etc/ucarp', mode: '644' }
    - name: Configure ucarp service
      systemd_service:
        daemon_reload: true
        name: ucarp@001
        state: "{% if vars['vars']['ucarp_service_enabled'] %}started{% else %}stopped{% endif %}"
        enabled: "{{ vars['vars']['ucarp_service_enabled'] }}"
